# -*- coding: utf-8 -*-
"""Movie_Recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l4RDZwrtBj1soL8CAW9yPMPTLpkz9F90
"""

import tensorflow as tf
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv("titles.csv")

user = input("Search plot: ")

df.head()

df_1 = df[["title", "description", "genres", "production_countries"]].copy()

df_1.head()

def description_vectorizer(df, description):
  df[description].fillna("", inplace=True)
  descriptions = df[description].tolist()
  vectorizer = TfidfVectorizer()
  desc_matrix = vectorizer.fit_transform(descriptions)

  return desc_matrix, vectorizer

desc_matrix, vectorizer = description_vectorizer(df_1, 'description')

print(desc_matrix)

user_vect = vectorizer.transform([user])

def cos_sim(desc_data, desc_input):

  similarities = []
  for movie_desc in desc_data:
    cosine_sim = cosine_similarity(movie_desc, desc_input)
    similarities.append(cosine_sim)
  return similarities

similarities = cos_sim(desc_matrix, user_vect)
print(similarities)

df_1["Similarities"] = [sim[0] for sim in similarities]

ranked_desc = df_1.sort_values(by='Similarities', ascending = False)

def top_n(n):
  top_n_similar = ranked_desc.head(n)
  return top_n_similar

top_match = top_n(5)

print(top_match)

top_movie_indices = top_match.index.tolist()
top_movie_titles = top_match["title"].tolist()
similarity_matrix = cosine_similarity(desc_matrix[top_movie_indices], desc_matrix)

plt.figure(figsize=(10,8))
sns.heatmap(similarity_matrix, annot=True, fmt=".2f", yticklabels=top_movie_titles)
plt.title("Similarity heatmap")
plt.xlabel("Movies")
plt.ylabel("Movies")
plt.show()

